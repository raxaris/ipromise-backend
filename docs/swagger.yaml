basePath: /
definitions:
  dto.CreatePromiseRequest:
    properties:
      deadline:
        description: Можно передавать только для основного промиса
        type: string
      description:
        type: string
      parent_id:
        description: Если null, это основное обещание
        type: string
      status:
        type: string
      title:
        type: string
    required:
    - status
    - title
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.SignupRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - confirm_password
    - email
    - password
    - username
    type: object
  dto.UpdatePromiseRequest:
    properties:
      deadline:
        description: Только для основного обещания
        type: string
      description:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      role:
        description: Только для админов
        type: string
      username:
        type: string
    type: object
  models.Promise:
    properties:
      deadline:
        type: string
      description:
        type: string
      id:
        type: string
      parentID:
        description: NULL, если это основной Promise
        type: string
      status:
        type: string
      title:
        type: string
      userID:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для отслеживания обещаний пользователей.
  title: iPromise API
  version: "1.0"
paths:
  /admin/promises/{id}:
    delete:
      description: Позволяет администратору удалить обещание по ID
      parameters:
      - description: ID обещания
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: 'message: Обещание удалено'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Ошибка при удалении обещания'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: У вас нет прав на удаление обещания'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление обещания
      tags:
      - admin
  /admin/users:
    get:
      description: Возвращает список всех зарегистрированных пользователей
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: 'error: Ошибка сервера'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение всех пользователей
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Логин по email и паролю, выдаёт JWT токены
      parameters:
      - description: Данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'access_token: токен, refresh_token: токен'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Ошибка валидации'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Неверный email или пароль'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка сервера'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Авторизация пользователя
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Использует Refresh Token для выдачи нового Access Token
      parameters:
      - description: Refresh Token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'access_token: новый access-токен'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Ошибка валидации'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Недействительный Refresh-токен'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка сервера'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление Access Token
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя по email, имени и паролю
      parameters:
      - description: Данные для регистрации пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.SignupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Пользователь успешно зарегистрирован'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Неверные данные запроса'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'error: Email или имя пользователя уже занято'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Внутренняя ошибка сервера'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация нового пользователя
      tags:
      - Auth
  /promises:
    get:
      description: Возвращает список всех обещаний
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Promise'
            type: array
      security:
      - BearerAuth: []
      summary: Получение всех обещаний
      tags:
      - promises
    post:
      consumes:
      - application/json
      description: Позволяет пользователю создать новое обещание
      parameters:
      - description: Данные обещания
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePromiseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Обещание успешно создано'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Ошибка валидации'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка сервера'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Создание нового обещания
      tags:
      - promises
  /promises/{id}:
    put:
      description: Позволяет обновить информацию о обещании
      parameters:
      - description: ID обещания
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePromiseRequest'
      responses:
        "200":
          description: 'message: Обещание обновлено'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Ошибка валидации'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Нет прав на редактирование'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновление обещания
      tags:
      - promises
  /user:
    delete:
      description: Удаляет аккаунт текущего пользователя
      responses:
        "200":
          description: 'message: Аккаунт удалён'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Пользователь не найден'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка удаления'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Удаление аккаунта
      tags:
      - users
    get:
      description: Возвращает данные текущего пользователя
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: 'error: Пользователь не найден'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение информации о себе
      tags:
      - users
    put:
      description: Позволяет изменить username (доступно только самому пользователю)
      parameters:
      - description: Данные для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      responses:
        "200":
          description: 'message: Данные пользователя обновлены'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Ошибка валидации'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'error: Нет прав на редактирование'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка сервера'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Обновление профиля пользователя
      tags:
      - users
  /users/{id}:
    get:
      description: Возвращает данные пользователя по ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'error: Неверный формат ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Пользователь не найден'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение пользователя по ID
      tags:
      - users
  /users/{user_id}/promises:
    get:
      description: Возвращает список обещаний, созданных пользователем
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Promise'
            type: array
        "400":
          description: 'error: Неверный формат ID пользователя'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Ошибка получения обещаний'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение обещаний пользователя
      tags:
      - promises
  /users/username/{username}:
    get:
      description: Возвращает данные пользователя по username
      parameters:
      - description: Имя пользователя
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: 'error: Пользователь не найден'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получение пользователя по username
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
