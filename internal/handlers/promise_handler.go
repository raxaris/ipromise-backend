package handlers

import (
	"github.com/raxaris/ipromise-backend/internal/models"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/raxaris/ipromise-backend/internal/dto"
	"github.com/raxaris/ipromise-backend/internal/services"
)

// CreatePromiseHandler —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –æ–±–µ—â–∞–Ω–∏–µ
// @Summary –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–µ—â–∞–Ω–∏—è
// @Description –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±–µ—â–∞–Ω–∏–µ
// @Tags promises
// @Security BearerAuth
// @Accept json
// @Produce json
// @Param input body dto.CreatePromiseRequest true "–î–∞–Ω–Ω—ã–µ –æ–±–µ—â–∞–Ω–∏—è"
// @Success 201 {object} map[string]string "message: –û–±–µ—â–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"
// @Failure 400 {object} map[string]string "error: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
// @Failure 500 {object} map[string]string "error: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
// @Router /promises [post]
func CreatePromiseHandler(c *gin.Context) {
	var req dto.CreatePromiseRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	userID, _ := uuid.Parse(c.GetString("user_id"))

	// –°–æ–∑–¥–∞—ë–º –æ–±–µ—â–∞–Ω–∏–µ
	err := services.CreatePromise(userID, req)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "–û–±–µ—â–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"})
}

// GetAllPromisesHandler –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–±–µ—â–∞–Ω–∏—è
// @Summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–µ—â–∞–Ω–∏–π
// @Description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±–µ—â–∞–Ω–∏–π
// @Tags promises
// @Security BearerAuth
// @Success 200 {array} models.Promise
// @Router /promises [get]
func GetAllPromisesHandler(c *gin.Context) {
	isAdmin := c.GetString("role") == "admin"

	var promises []models.Promise
	var err error

	if isAdmin {
		promises, err = services.GetAllPromises()
	} else {
		promises, err = services.GetAllPublicPromises() // üîπ –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –æ–±–µ—â–∞–Ω–∏—è
	}

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–µ—â–∞–Ω–∏–π"})
		return
	}

	c.JSON(http.StatusOK, promises)
}

func GetPromiseByIDHandler(c *gin.Context) {
	userID, _ := uuid.Parse(c.GetString("user_id"))
	isAdmin := c.GetString("role") == "admin"
	promiseID, err := uuid.Parse(c.Param("id"))

	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ–±–µ—â–∞–Ω–∏—è"})
		return
	}

	promise, err := services.GetPromiseByID(promiseID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–û–±–µ—â–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
		return
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø: –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –æ–±–µ—â–∞–Ω–∏–µ
	if promise.IsPrivate && promise.UserID != userID && !isAdmin {
		c.JSON(http.StatusForbidden, gin.H{"error": "–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ"})
		return
	}

	c.JSON(http.StatusOK, promise)
}

// GetUserPromisesHandler –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–µ—â–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Summary –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–µ—â–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
// @Tags promises
// @Security BearerAuth
// @Param id path string true "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Success 200 {array} models.Promise
// @Failure 400 {object} map[string]string "error: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
// @Failure 404 {object} map[string]string "error: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
// @Failure 500 {object} map[string]string "error: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–µ—â–∞–Ω–∏–π"
// @Router /users/{id}/promises [get]
func GetUserPromisesHandler(c *gin.Context) {
	requestedUserID, err := uuid.Parse(c.Param("id")) // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –æ–±–µ—â–∞–Ω–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		return
	}

	currentUserID, _ := uuid.Parse(c.GetString("user_id")) // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	isAdmin := c.GetString("role") == "admin"

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–µ—â–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	promises, err := services.GetPromiseByUserID(requestedUserID)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–µ—â–∞–Ω–∏–π"})
		return
	}

	// –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∏ –Ω–µ –∞–¥–º–∏–Ω ‚Äì —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –æ–±–µ—â–∞–Ω–∏—è
	if requestedUserID != currentUserID && !isAdmin {
		var filteredPromises []models.Promise
		for _, promise := range promises {
			if !promise.IsPrivate {
				filteredPromises = append(filteredPromises, promise)
			}
		}
		promises = filteredPromises
	}

	c.JSON(http.StatusOK, promises)
}

// GetAllPublicPromisesHandler ‚Äì –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–±–µ—â–∞–Ω–∏–π
func GetAllPublicPromisesHandler(c *gin.Context) {
	promises, err := services.GetAllPublicPromises()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–µ—â–∞–Ω–∏–π"})
		return
	}

	c.JSON(http.StatusOK, promises)
}

// UpdatePromiseHandler –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±–µ—â–∞–Ω–∏–µ (–∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω)
// @Summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏—è
// @Description –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±–µ—â–∞–Ω–∏–∏
// @Tags promises
// @Security BearerAuth
// @Param id path string true "ID –æ–±–µ—â–∞–Ω–∏—è"
// @Param input body dto.UpdatePromiseRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
// @Success 200 {object} map[string]string "message: –û–±–µ—â–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
// @Failure 400 {object} map[string]string "error: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
// @Failure 403 {object} map[string]string "error: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
// @Router /promises/{id} [put]
func UpdatePromiseHandler(c *gin.Context) {
	var req dto.UpdatePromiseRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userID, _ := uuid.Parse(c.GetString("user_id"))
	promiseID := c.Param("id")
	isAdmin := c.GetString("role") == "admin"

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ—â–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
	err := services.UpdatePromise(userID, promiseID, req, isAdmin)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–û–±–µ—â–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"})
}

// DeletePromiseHandler —É–¥–∞–ª—è–µ—Ç –æ–±–µ—â–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
// @Summary –£–¥–∞–ª–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏—è
// @Description –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–¥–∞–ª–∏—Ç—å –æ–±–µ—â–∞–Ω–∏–µ –ø–æ ID
// @Tags admin
// @Security BearerAuth
// @Param id path string true "ID –æ–±–µ—â–∞–Ω–∏—è"
// @Success 200 {object} map[string]string "message: –û–±–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"
// @Failure 403 {object} map[string]string "error: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏—è"
// @Failure 400 {object} map[string]string "error: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–µ—â–∞–Ω–∏—è"
// @Router /admin/promises/{id} [delete]
func DeletePromiseHandler(c *gin.Context) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
	isAdmin := c.GetString("role") == "admin"
	if !isAdmin {
		c.JSON(http.StatusForbidden, gin.H{"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±–µ—â–∞–Ω–∏—è"})
		return
	}

	// ID –æ–±–µ—â–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	promiseID := c.Param("id")

	// –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–∏—è
	err := services.DeletePromise(promiseID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–û–±–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"})
}
