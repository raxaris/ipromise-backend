package main

import (
	"fmt"
	"github.com/raxaris/ipromise-backend/internal/middleware"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/raxaris/ipromise-backend/config"
	"github.com/raxaris/ipromise-backend/internal/handlers"
)

func main() {
	config.ConnectDB() // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	config.LoadEnv()   // –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

	r := gin.Default()

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	auth := r.Group("/auth")
	{
		auth.POST("/signup", handlers.SignupHandler)
		auth.POST("/login", handlers.LoginHandler)
		auth.POST("/refresh", handlers.RefreshTokenHandler)
	}

	protected := r.Group("/protected")
	protected.Use(middleware.AuthMiddleware()) // –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
	{
		protected.GET("/test", func(c *gin.Context) {
			userID, exists := c.Get("user_id") // –î–æ—Å—Ç–∞–µ–º user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
			if !exists {
				c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id"})
				return
			}
			c.JSON(http.StatusOK, gin.H{"message": "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω", "user_id": userID})
		})
	}
	
	port := "8080"
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + port)
	log.Fatal(r.Run(":" + port))
}
