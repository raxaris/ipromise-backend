package main

import (
	"fmt"
	"log"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/raxaris/ipromise-backend/config"
	"github.com/raxaris/ipromise-backend/internal/handlers"
	"github.com/raxaris/ipromise-backend/internal/middleware"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/raxaris/ipromise-backend/docs"
)

// @title iPromise API
// @version 1.0
// @description API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–µ—â–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	config.LoadEnv()
	config.ConnectDB()

	r := gin.Default()

	// CORS Middleware
	r.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	// üìå Swagger UI
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// üîπ –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	r.GET("/users/:id", handlers.GetPublicUserHandler)       // –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ email
	r.GET("/promises", handlers.GetAllPublicPromisesHandler) // –í—Å–µ –æ–±–µ—â–∞–Ω–∏—è (–±–µ–∑ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
	r.GET("/promises/:id", handlers.GetPromiseByIDHandler)   // –û–¥–Ω–æ –æ–±–µ—â–∞–Ω–∏–µ

	// üîπ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
	user := r.Group("/users")
	user.Use(middleware.AuthMiddleware())
	{
		user.GET("/me", handlers.GetCurrentUserHandler) // –õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
		user.PUT("/me", handlers.UpdateUserHandler)     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
		user.GET("/:id", handlers.GetUserByIDHandler)   // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–µ–±—è)
		user.GET("/byusername/:username", handlers.GetUserByUsernameHandler)

		// –û–±–µ—â–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user.GET("/me/promises", handlers.GetUserPromisesHandler)      // –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –æ–±–µ—â–∞–Ω–∏—è
		user.POST("/me/promises", handlers.CreatePromiseHandler)       // –°–æ–∑–¥–∞—Ç—å –æ–±–µ—â–∞–Ω–∏–µ
		user.PUT("/me/promises/:id", handlers.UpdatePromiseHandler)    // –û–±–Ω–æ–≤–∏—Ç—å –æ–±–µ—â–∞–Ω–∏–µ
		user.DELETE("/me/promises/:id", handlers.DeletePromiseHandler) // –£–¥–∞–ª–∏—Ç—å –æ–±–µ—â–∞–Ω–∏–µ
	}

	// üîπ –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
	admin := r.Group("/admin")
	admin.Use(middleware.AuthMiddleware(), middleware.AdminMiddleware())
	{
		// –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		admin.GET("/users", handlers.GetAllUsersHandler)
		admin.PUT("/users/:id", handlers.UpdateUserHandler)
		admin.DELETE("/users/:id", handlers.DeleteUserHandler)

		// –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–±–µ—â–∞–Ω–∏—è–º
		admin.GET("/promises", handlers.GetAllPromisesHandler)
		admin.PUT("/promises/:id", handlers.UpdatePromiseHandler)
		admin.DELETE("/promises/:id", handlers.DeletePromiseHandler)
	}

	port := "8080"
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + port)
	log.Fatal(r.Run(":" + port))
}
