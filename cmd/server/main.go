package main

import (
	"fmt"
	"log"

	"github.com/gin-gonic/gin"
	"github.com/raxaris/ipromise-backend/config"
	"github.com/raxaris/ipromise-backend/internal/handlers"
	"github.com/raxaris/ipromise-backend/internal/middleware"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/raxaris/ipromise-backend/docs" // üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç (–ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
)

// @title iPromise API
// @version 1.0
// @description API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–µ—â–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
// @host localhost:8080
// @BasePath /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
func main() {
	config.LoadEnv()
	config.ConnectDB()

	r := gin.Default()

	// üìå Swagger UI
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// üîπ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	auth := r.Group("/auth")
	{
		auth.POST("/signup", handlers.SignupHandler)
		auth.POST("/login", handlers.LoginHandler)
		auth.POST("/refresh", handlers.RefreshTokenHandler)
	}

	// üîπ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	protected := r.Group("/")
	protected.Use(middleware.AuthMiddleware())
	{
		protected.GET("/user", handlers.GetCurrentUserHandler)
		protected.PUT("/user", handlers.UpdateUserHandler)
		protected.DELETE("/user", handlers.DeleteUserHandler)

		protected.POST("/promises", handlers.CreatePromiseHandler)
		protected.GET("/promises", handlers.GetPromisesByUserIDHandler)
		protected.PUT("/promises/:id", handlers.UpdatePromiseHandler)
	}

	// üîπ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
	moderator := r.Group("/moderation")
	moderator.Use(middleware.ModeratorMiddleware())
	{
		moderator.DELETE("/promises/:id", handlers.DeletePromiseHandler)
	}

	// üîπ –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
	admin := r.Group("/admin")
	//admin.Use(middleware.AdminMiddleware())
	{
		admin.GET("/users", handlers.GetAllUsersHandler)
		admin.GET("/users/:id", handlers.GetUserByIDHandler)
		admin.GET("/users/byusername/:username", handlers.GetUserByUsernameHandler)
		admin.PUT("/users/:id", handlers.UpdateUserHandler)
		admin.DELETE("/users/:id", handlers.DeleteUserHandler)

		admin.GET("/promises", handlers.GetAllPromisesHandler)
		admin.GET("/promises/:id", handlers.GetPromisesByIDHandler)
		admin.DELETE("/promises/:id", handlers.DeletePromiseHandler)
	}

	port := "8080"
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + port)
	log.Fatal(r.Run(":" + port))
}
